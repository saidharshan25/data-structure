class Node{
	int data;
	Node left,right;
	Node(int data){
		this.data=data;
		left=right=null;
	}
}
class MainMini {
	Node root;
	Node insert (Node root,int data){
		Node newnode=new Node(data);
		if(root==null){
			newnode.left=newnode.right=null;
			return newnode;
		}
		if (data<root.data) root.left=insert(root.left,data);
		else if(data>root.data) root.right=insert(root.right,data);
		return root;
		}
		int Mini(Node root){
		if(root==null||root.left==null){
			System.out.println(root.data);
			return root.data;
		}
		return Mini(root.left);
		}
		int Max(Node root){
		if(root==null||root.right==null){
			System.out.println(root.data);
			return root.data;
			}
		return Max(root.right);
		}
		boolean Search(Node root,int target){
			if(root.data==target) return true;
			if(target<root.data)return Search(root.left,target);
			else return Search(root.right,target); 
		}
		void inorder(Node root){
		if (root==null){
			return;
		}
		inorder(root.left);
		System.out.print(root.data+" ");
		inorder(root.right);
	}
	void preorder(Node root){
		if (root==null){
			return;
		}
		System.out.print(root.data+" ");
		preorder(root.left);
		preorder(root.right);
	}
	void postorder(Node root){
		if (root==null){
			return;
		}
		postorder(root.left);
		postorder(root.right);
		System.out.print(root.data+" ");
	}
	public static void main(String args[]){
		MainMini t1=new MainMini();
		t1.root=t1.insert(t1.root,20);
		t1.insert(t1.root,25);
		t1.insert(t1.root,15);
		t1.inorder(t1.root);
		t1.preorder(t1.root);
		t1.postorder(t1.root);
		t1.Mini(t1.root);
		t1.Max(t1.root);
		System.out.println(t1.Search(t1.root,15)?"Found":"Not Found");
	}
}
