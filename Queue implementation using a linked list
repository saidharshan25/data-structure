class Node {
    int data;
    Node next;
    Node(int value) {
        data = value;
        next = null;
    }
}
class QueueLL {
    private Node front, rear; 
    QueueLL() {
        front = rear = null;
    }
    public void enqueue(int value) {
        Node newNode = new Node(value); 
        if (rear == null) { 
            front = rear = newNode;
        } else {
            rear.next = newNode; 
            rear = newNode;      
        }
    }
   public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue Underflow");
            return -1; 
        }
        int value = front.data;  
        front = front.next;      
        if (front == null) {     
            rear = null;         
        }
        return value;            
}
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is Empty");
            return -1; 
        }
        return front.data;
    }
     public boolean isEmpty() {
        return front == null; 
    }
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is Empty");
            return;
        }
        Node temp = front;
        System.out.print("Queue (front to rear): ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}
class QueueLLDemo {
    public static void main(String[] args) {
        QueueLL queue = new QueueLL();
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.display();
        System.out.println("Dequeued: " + queue.dequeue());
        queue.display();
    }
}


Output:
Queue (front to rear): 10 20 30 
Dequeued: 10
Queue (front to rear): 20 30 

